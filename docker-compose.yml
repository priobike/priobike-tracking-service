networks:
  production-network:
    name: production-network

services:
  db:
    image: postgis/postgis:14-3.3
    container_name: postgres
    hostname: db
    networks:
      - production-network
    env_file:
      - dev.env
    volumes:
      - pg_conf:/etc/postgresql
      - pg_log:/var/log/postgresql
      - pg_data:/var/lib/postgresql/data
    # Log all statements
    # See: https://postgresqlco.nf/doc/en/param/log_statement/
    command: ["postgres", "-c", "log_statement=all", "-c", "log_destination=stderr"]
    restart: unless-stopped

  backend:
    container_name: backend
    volumes:
      - tracking_service_staticfiles:/code/backend/static/
    networks:
      - production-network
    build: .
    env_file:
      - dev.env
    depends_on:
      - db
    command:
      - /bin/bash
      - -c
      - |
        ./wait-for-postgres.sh
        poetry run python backend/manage.py migrate
        poetry run python backend/manage.py collectstatic --no-input
        poetry run python backend/manage.py createsuperuser --noinput
        poetry run python backend/manage.py runserver 0.0.0.0:8000
    restart: unless-stopped

  nginx_inner:
    image: nginx:1.21.6
    container_name: nginx_inner
    hostname: nginx_inner
    volumes:
      - ./nginx_inner/conf.d:/etc/nginx/conf.d
      - ./nginx_inner/proxy_params:/etc/nginx/proxy_params
      # The static files for the tracking service
      - tracking_service_staticfiles:/tracking-service/backend/static/
    networks:
      - production-network
    depends_on:
      - db
      - backend
    restart: unless-stopped

  nginx_outer:
    image: nginx:1.21.6
    container_name: nginx_outer
    hostname: nginx_outer
    volumes:
      - ./nginx_outer/conf.d:/etc/nginx/conf.d
      - ./nginx_outer/proxy_params:/etc/nginx/proxy_params
    # The NGINX proxy service is the only service that listens to the outside world
    ports:
      # This is important for the root NGINX proxy of the server.
      - "20051:80" # HTTP
    networks:
      - production-network
    depends_on:
      - db
      - backend
      - nginx_inner
    restart: unless-stopped

volumes:
  pg_data:
  pg_conf:
  pg_log:

  tracking_service_staticfiles:
